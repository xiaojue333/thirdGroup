<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--【注意】： 所有的路径url 必须以/打头，否则 启动报错-->

<!--  静态资源过滤, 不需要登陆就可以访问
  security: none放行
  -->
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/fail.html" security="none"/>

<!--  拦截规则
  auto-config: 自动配置，处理登陆，退出，生成登陆页面....
  use-expressions: true access的属性值只能是hasRole,has.... 表达式
                        access 只能是以ROLE_（大写）打头的字符串
  -->
    <security:http auto-config="true" use-expressions="true">
        <!--只要认证通过就可以访问isAuthenticated-->
        <security:intercept-url pattern="/index.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html"  access="hasRole('ADMIN')" />

        <!--拥有ROLE_ABC角色就可以访问d.html页面-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ABC')" />
        <security:form-login
                login-page="/login.html"
                login-processing-url="/login"
                username-parameter="abc"
                password-parameter="bbb"
                default-target-url="/index.html"
                authentication-failure-url="/fail.html"
                always-use-default-target="false"
        />
        <!--关闭跨域访问限制-->
        <security:csrf disabled="true"/>
        <!--logout-url: 访问这个路径就可以退出登陆。
            invalidate-session: true让会话失效
            logout-success-url: 退出后跳转的页面
        -->
        <security:logout logout-url="/logout" invalidate-session="true" logout-success-url="/login.html"/>
    </security:http>
<!--  认证管理器  -->
    <security:authentication-manager>
        <!--提供认证用户的信息, 登陆用户使用的用户名及密码,用户所拥有的权限集合
            user-service-ref 认证用户的信息找spring容器中一个叫userService的对象来获取
            这个bean对象必须实现UserDetailsService接口
        -->
        <security:authentication-provider user-service-ref="userService" >
        <!--  使用的密码加密器  -->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--开启权限控制的注解支持，就可在Controller类上或方法上@PreAuthorize(表达式)-->
    <security:global-method-security pre-post-annotations="enabled"/>

    <!--自定义的从数据库获取登陆用户信息-->
    <bean id="userService" class="com.itheima.service.UserService"/>

    <!--定义使用的加密器，做密码校验-->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <context:component-scan base-package="com.itheima"/>
    <mvc:annotation-driven></mvc:annotation-driven>
</beans>